@import url('https://fonts.googleapis.com/css2?family=VT323&display=swap');

:root {
  --crt-background: #0a0a0a;
  --crt-text: #ffffff;
  --crt-glow: 0 0 10px rgba(255, 255, 255, 0.7);
  --tv-border: #2b2b2b;
  --tv-frame: #1a1a1a;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  font-family: 'VT323', monospace;
}

body {
  background: #121212;
  color: var(--crt-text);
  /* min-height: 100vh;
  height: 100vh; */
  margin: 25;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 0;
}

.crt-screen {
  position: relative;
  width: 100%;
  height: 94vh;
  max-width: none;
  background: var(--tv-frame);
  padding: 2rem;
  border-radius: 0;
  box-shadow: 
    inset 0 0 0 8px var(--tv-border),
    0 0 50px rgba(0, 0, 0, 0.5);
}

/* TV Screen Container */
.tv-inner {
  position: relative;
  background: var(--crt-background);
  padding: 2rem;
  border-radius: 100px / 15px;
  overflow-y: auto;
  height: calc(100% - 4rem);
  box-shadow: inset 0 0 100px rgba(0, 0, 0, 0.5);
  /* Hide scrollbar but keep functionality */
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  animation: screenFlicker 8s infinite;
}

/* Hide scrollbar for Chrome, Safari and Opera */
.tv-inner::-webkit-scrollbar {
  display: none;
}

/* Curved Screen Effect */
.tv-inner::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    rgba(0, 0, 0, 0.1),
    rgba(0, 0, 0, 0.1) 50%,
    rgba(255, 255, 255, 0.1)
  );
  background-size: 100% 8px;
  animation: horizontalGlitch 4s infinite;
  opacity: 0.2;
  pointer-events: none;
  z-index: 1;
  animation: screenDistort 10s infinite;
}

/* Scanlines */
.tv-inner::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: repeating-linear-gradient(
    0deg,
    rgba(0, 0, 0, 0) 0,
    rgba(255, 255, 255, 0.1) 1px,
    rgba(0, 0, 0, 0.2) 2px
  );
  background-size: 100% 4px;
  animation: scanline 4s linear infinite;
  pointer-events: none;
  z-index: 2;
  mix-blend-mode: overlay;
}

/* Update TV Controls */
.tv-controls {
  position: absolute;
  bottom: 1rem;
  right: 3rem;
  display: flex;
  gap: 1rem;
  z-index: 1000;
}

.tv-button {
  width: 2rem;
  height: 2rem;
  background: var(--tv-border);
  border-radius: 50%;
  border: 2px solid #3a3a3a;
  color: var(--crt-text);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 1.2rem;
  font-weight: bold;
  transition: all 0.3s ease;
  position: relative;
}

/* Update the line (minus sign) to only show on non-power buttons */
.tv-button:not(.power)::after {
  content: "";
  position: absolute;
  width: 80%;
  height: 4px;
  background: #3a3a3a;
  top: 50%;
  left: 10%;
  transform: translateY(-50%);
}

/* Keep the vertical line (plus sign) for the plus button */
.tv-button.plus::before {
  content: "";
  position: absolute;
  height: 80%;
  width: 4px;
  background: #3a3a3a;
  left: 50%;
  top: 10%;
  transform: translateX(-50%);
}

.tv-button:hover {
  border-color: var(--crt-text);
  box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
}

.tv-button:active {
  transform: scale(0.95) rotate(180deg);
}

.tv-button.spinning {
  animation: spin 0.3s ease-in-out;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(180deg);
  }
}

/* Remove the old glasses button styles */
.glasses-button {
  display: none;
}

.room {
  border: 4px solid var(--crt-text);
  padding: 2rem;
  margin: 1rem;
  text-shadow: var(--crt-glow);
  position: relative;
  z-index: 1;
}

@keyframes scanline {
  0% {
    transform: translateY(-100%);
  }
  100% {
    transform: translateY(100%);
  }
}

@keyframes flicker {
  0% { opacity: 0.98; }
  100% { opacity: 1; }
}

.button {
  background: transparent;
  border: 2px solid var(--crt-text);
  color: var(--crt-text);
  padding: 0.5rem 1rem;
  margin: 0.5rem;
  cursor: pointer;
  text-shadow: var(--crt-glow);
  transition: all 0.3s ease;
}

.button:hover {
  background: var(--crt-text);
  color: var(--crt-background);
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-5px); }
  75% { transform: translateX(5px); }
}

.shake {
  animation: shake 0.3s ease-in-out;
}

/* Add horizontal glitch effect */
.tv-inner::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    rgba(0, 0, 0, 0.1),
    rgba(0, 0, 0, 0.1) 50%,
    rgba(255, 255, 255, 0.1)
  );
  background-size: 100% 8px;
  animation: horizontalGlitch 4s infinite;
  opacity: 0.2;
  pointer-events: none;
  z-index: 1;
}

/* Add text glitch effect */
.glitch-text {
  animation: textGlitch 3s infinite;
  position: relative;
  display: inline-block;
}

.glitch-text::before,
.glitch-text::after {
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  clip: rect(0, 900px, 0, 0);
  animation: glitchText 3s infinite linear alternate-reverse;
}

.glitch-text::before {
  text-shadow: -2px 0 #ff00c1;
  animation: glitchText 2s infinite linear alternate-reverse;
  left: 2px;
}

.glitch-text::after {
  text-shadow: 2px 0 #00fff9;
  animation: glitchText 3s infinite linear alternate-reverse;
  left: -2px;
}

/* Add horizontal glitch animation */
@keyframes horizontalGlitch {
  0% {
    transform: translateX(0);
    opacity: 0.7;
  }
  1% {
    transform: translateX(-5px);
    opacity: 1;
  }
  2% {
    transform: translateX(5px);
    opacity: 1;
  }
  3% {
    transform: translateX(-2px);
    opacity: 0.7;
  }
  4% {
    transform: translateX(0);
    opacity: 0.7;
  }
  15% {
    transform: translateX(0);
  }
  16% {
    transform: translateX(7px);
  }
  17% {
    transform: translateX(-7px);
  }
  18% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(0);
  }
}

/* Add text glitch animations */
@keyframes textGlitch {
  0% {
    clip: rect(76px, 9999px, 31px, 0);
  }
  5% {
    clip: rect(25px, 9999px, 99px, 0);
  }
  10% {
    clip: rect(53px, 9999px, 12px, 0);
  }
  15% {
    clip: rect(91px, 9999px, 43px, 0);
  }
  20% {
    clip: rect(15px, 9999px, 67px, 0);
  }
  25% {
    clip: rect(83px, 9999px, 29px, 0);
  }
  30% {
    clip: rect(47px, 9999px, 95px, 0);
  }
  35% {
    clip: rect(35px, 9999px, 71px, 0);
  }
  40% {
    clip: rect(63px, 9999px, 19px, 0);
  }
  45% {
    clip: rect(79px, 9999px, 57px, 0);
  }
  50% {
    clip: rect(21px, 9999px, 87px, 0);
  }
  55% {
    clip: rect(69px, 9999px, 33px, 0);
  }
  60% {
    clip: rect(41px, 9999px, 81px, 0);
  }
  65% {
    clip: rect(17px, 9999px, 63px, 0);
  }
  70% {
    clip: rect(93px, 9999px, 25px, 0);
  }
  75% {
    clip: rect(55px, 9999px, 49px, 0);
  }
  80% {
    clip: rect(31px, 9999px, 75px, 0);
  }
  85% {
    clip: rect(87px, 9999px, 37px, 0);
  }
  90% {
    clip: rect(45px, 9999px, 91px, 0);
  }
  95% {
    clip: rect(73px, 9999px, 23px, 0);
  }
  100% {
    clip: rect(59px, 9999px, 83px, 0);
  }
}

@keyframes screenFlicker {
  0% { opacity: 1; }
  1% { opacity: 0.8; }
  2% { opacity: 0.95; }
  3% { opacity: 0.9; }
  4% { opacity: 0.95; }
  5% { opacity: 1; }
  45% { opacity: 1; }
  46% { opacity: 0.7; }
  47% { opacity: 1; }
  48% { opacity: 0.85; }
  49% { opacity: 1; }
  50% { opacity: 0.9; }
  51% { opacity: 1; }
  85% { opacity: 1; }
  86% { opacity: 0.8; }
  87% { opacity: 0.9; }
  88% { opacity: 1; }
  89% { opacity: 0.85; }
  90% { opacity: 1; }
}

@keyframes screenDistort {
  0% {
    transform: scale(1, 1);
  }
  2% {
    transform: scale(1, 1.02);
  }
  4% {
    transform: scale(1, 0.98);
  }
  6% {
    transform: scale(1, 1);
  }
  98% {
    transform: scale(1, 1);
  }
  99% {
    transform: scale(1.02, 1);
  }
  100% {
    transform: scale(1, 1);
  }
}

/* Update TV Controls */
.tv-button.power {
  border-color: #444;
  transition: all 0.3s ease;
}

.tv-button.power .power-indicator {
  width: 30%;
  height: 30%;
  background: #33ff33;
  border-radius: 50%;
  transition: all 0.3s ease;
}

.tv-button.power.off .power-indicator {
  background: #ff3333;
}

.tv-button.power:hover {
  border-color: var(--crt-text);
}

/* CRT Power animations */
.crt-screen.power-off .tv-inner {
  animation: turnOff 0.4s ease-in-out;
  animation-fill-mode: forwards;
}

.crt-screen:not(.power-off) .tv-inner {
  animation: turnOn 0.4s ease-in-out;
}

@keyframes turnOff {
  0% {
    transform: scale(1, 1);
    opacity: 1;
    filter: brightness(1);
  }
  10% {
    transform: scale(1, 1.3);
    opacity: 0.7;
    filter: brightness(0.8);
  }
  30% {
    transform: scale(1, 0.02);
    opacity: 0.5;
    filter: brightness(0.6);
  }
  100% {
    transform: scale(0, 0.0001);
    opacity: 0;
    filter: brightness(0);
  }
}

@keyframes turnOn {
  0% {
    transform: scale(1, 0.0001);
    opacity: 0;
    filter: brightness(0);
  }
  10% {
    transform: scale(1, 0.02);
    opacity: 0.5;
    filter: brightness(0.6);
  }
  50% {
    transform: scale(1, 1.3);
    opacity: 0.7;
    filter: brightness(0.8);
  }
  100% {
    transform: scale(1, 1);
    opacity: 1;
    filter: brightness(1);
  }
}

/* Add white noise effect when powered off */
.crt-screen.power-off::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    repeating-radial-gradient(
      circle at 50% 50%,
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0.1) 2px,
      transparent 2px,
      transparent 4px
    );
  animation: staticNoise 0.2s steps(4) infinite;
  opacity: 0;
  transition: opacity 0.4s ease-in-out;
  pointer-events: none;
  z-index: 10;
}

.crt-screen.power-off::before {
  opacity: 0.1;
}

@keyframes staticNoise {
  0% { transform: translate(0, 0); }
  25% { transform: translate(-1%, -1%); }
  50% { transform: translate(1%, 1%); }
  75% { transform: translate(-1%, 1%); }
  100% { transform: translate(1%, -1%); }
}

/* Add CRT screen flicker on power state change */
.crt-screen::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: white;
  opacity: 0;
  pointer-events: none;
  z-index: 11;
}

.crt-screen.power-off::after {
  animation: screenFlash 0.4s ease-out;
}

@keyframes screenFlash {
  0% { opacity: 0; }
  10% { opacity: 0.5; }
  20% { opacity: 0.2; }
  30% { opacity: 0.7; }
  40% { opacity: 0.3; }
  50% { opacity: 0; }
  100% { opacity: 0; }
}

/* Update the power button to not rotate */
.tv-button.power:active {
  transform: scale(0.95);
}

/* Add smooth text scaling transition */
.tv-inner > div {
  transition: font-size 0.3s ease-in-out;
}

/* Add a subtle bounce effect when reaching min/max size */
.tv-inner > div.scale-limit {
  animation: scaleBounce 0.3s ease-in-out;
}

@keyframes scaleBounce {
  0% { transform: scale(1); }
  50% { transform: scale(0.95); }
  100% { transform: scale(1); }
}

/* Mini-games styles */
.mini-game {
  text-align: center;
  padding: 2rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.wifi-input {
  background: transparent;
  border: 2px solid var(--crt-text);
  color: var(--crt-text);
  padding: 0.5rem;
  margin: 1rem;
  font-family: 'VT323', monospace;
  font-size: 1.2rem;
}

.radio-button {
  font-size: 4rem;
  background: transparent;
  border: none;
  cursor: pointer;
  transition: transform 0.3s ease;
}

.radio-button:hover {
  transform: scale(1.1);
}

.music-waves {
  font-size: 2rem;
  animation: bounce 0.5s infinite alternate;
}

.lightbulb-container {
  width: 150px;
  height: 150px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 2rem;
  cursor: ns-resize;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 50%;
  padding: 1rem;
}

.lightbulb-icon {
  font-size: 5rem;
  transition: transform 0.1s ease-out, filter 0.3s ease;
  user-select: none;
  filter: brightness(0.5) saturate(0.5);
}

.lightbulb-icon.lit {
  filter: brightness(1.5) saturate(1.5);
  animation: glow 1s ease-in-out infinite alternate;
}

@keyframes glow {
  from {
    filter: brightness(1.5) saturate(1.5);
    text-shadow: 0 0 5px rgba(255, 255, 0, 0.5);
  }
  to {
    filter: brightness(2) saturate(2);
    text-shadow: 
      0 0 10px rgba(255, 255, 0, 0.7),
      0 0 20px rgba(255, 255, 0, 0.5);
  }
}

/* Remove the hover effect since we're using scroll now */
.lightbulb-icon:hover {
  transform: none;
}

@keyframes bounce {
  from {
    transform: translateY(0);
  }
  to {
    transform: translateY(-10px);
  }
}

/* Add to your existing mini-game styles */
.mini-game.programs {
  position: relative;
  width: 100%;
  height: 400px;
  overflow: hidden;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 8px;
}

.bouncing-program {
  position: absolute;
  width: 150px;
  height: 100px;
  background: rgba(255, 255, 255, 0.1);
  border: 2px solid var(--crt-text);
  border-radius: 4px;
  transition: transform 0.016s linear;
  cursor: default;
}

.bouncing-program .close-button {
  position: absolute;
  top: 5px;
  left: 5px;
  width: 20px;
  height: 20px;
  background: transparent;
  border: 1px solid var(--crt-text);
  color: var(--crt-text);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  border-radius: 2px;
  transition: all 0.2s ease;
}

.bouncing-program .close-button:hover {
  background: var(--crt-text);
  color: var(--crt-background);
}

.program-content {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: 'VT323', monospace;
  color: var(--crt-text);
  text-shadow: var(--crt-glow);
}

/* Add to your existing mini-game styles */
.mini-game.timezone {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.clock-display {
  background: rgba(255, 255, 255, 0.1);
  padding: 2rem 3rem;
  border-radius: 10px;
  border: 2px solid var(--crt-text);
  margin: 1rem;
}

.current-time {
  font-size: 3rem;
  font-family: 'VT323', monospace;
  text-shadow: var(--crt-glow);
  animation: pulse 1s infinite;
}

.timezone-select {
  background: transparent;
  border: 2px solid var(--crt-text);
  color: var(--crt-text);
  padding: 0.5rem;
  font-family: 'VT323', monospace;
  font-size: 1.2rem;
  width: 300px;
  cursor: pointer;
}

.timezone-select option {
  background: var(--crt-background);
  color: var(--crt-text);
}

@keyframes pulse {
  0% { opacity: 1; }
  50% { opacity: 0.8; }
  100% { opacity: 1; }
}

/* Add to your existing mini-game styles */
.mini-game.door {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.door-frame {
  position: relative;
  width: 400px;
  height: 300px;
  perspective: 800px;
  margin: 2rem;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 8px;
}

.car-door {
  position: absolute;
  width: 250px;
  height: 250px;
  left: 20px;
  top: 25px;
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.3),
    rgba(255, 255, 255, 0.1)
  );
  border: 2px solid var(--crt-text);
  border-right: none;
  transform-style: preserve-3d;
  cursor: grab;
  transition: transform 0.3s ease-out;
  z-index: 2;
  box-shadow: -2px 0 10px rgba(255, 255, 255, 0.1);
}

.car-door.dragging {
  cursor: grabbing;
  transition: none;
}

.car-door.closed {
  transition: transform 0.3s ease-out;
}

.door-handle {
  position: absolute;
  right: 30px;
  top: 50%;
  width: 40px;
  height: 15px;
  background: rgba(255, 255, 255, 0.4);
  border: 2px solid var(--crt-text);
  transform: translateY(-50%);
  box-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
}

.door-window {
  position: absolute;
  top: 30px;
  left: 30px;
  right: 30px;
  height: 80px;
  background: rgba(255, 255, 255, 0.15);
  border: 2px solid var(--crt-text);
  box-shadow: inset 0 0 20px rgba(255, 255, 255, 0.1);
}

.car-body {
  position: absolute;
  left: 20px;
  top: 25px;
  width: 360px;
  height: 250px;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid var(--crt-text);
  z-index: 1;
}

/* Add a glow effect when the door is almost closed */
.car-door.closed::after {
  content: '';
  position: absolute;
  inset: -2px;
  border: 2px solid var(--crt-text);
  filter: blur(4px);
  animation: doorGlow 1s ease-out;
}

@keyframes doorGlow {
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

/* Add to your existing mini-game styles */
.mini-game.thermostat {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.thermostat-display {
  background: rgba(255, 255, 255, 0.1);
  padding: 2rem;
  border-radius: 15px;
  border: 2px solid var(--crt-text);
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
  min-width: 200px;
  box-shadow: inset 0 0 20px rgba(255, 255, 255, 0.05);
}

.temp-buttons {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
}

.temp-button {
  background: transparent;
  border: 2px solid var(--crt-text);
  color: var(--crt-text);
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  transition: all 0.2s ease;
}

.temp-button:hover:not(:disabled) {
  background: var(--crt-text);
  color: var(--crt-background);
}

.temp-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.temperature {
  font-size: 3.5rem;
  font-family: 'VT323', monospace;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  text-shadow: var(--crt-glow);
  padding: 1rem 0;
}

.temp-degree {
  font-size: 2rem;
  opacity: 0.8;
}

.temp-message {
  font-size: 1.2rem;
  height: 1.5rem;
  text-align: center;
  opacity: 0.8;
  animation: fadeIn 0.3s ease-out;
}

/* Add a glow effect when reaching target temperature */
.temperature.target {
  animation: tempGlow 1s ease-in-out infinite alternate;
}

@keyframes tempGlow {
  from {
    text-shadow: 0 0 5px var(--crt-text);
  }
  to {
    text-shadow: 
      0 0 10px var(--crt-text),
      0 0 20px var(--crt-text);
  }
}

/* Add to your existing mini-game styles */
.mini-game.battery {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 2rem;
}

.battery-compartment {
  position: relative;
  width: 400px;
  height: 300px;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid var(--crt-text);
  border-radius: 8px;
}

.battery-slot {
  position: absolute;
  top: 100px;
  left: 150px;
  width: 100px;
  height: 40px;
  border: 2px dashed var(--crt-text);
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 10px;
}

.terminal {
  font-size: 1.5rem;
  font-weight: bold;
  opacity: 0.5;
}

.battery-item {
  position: absolute;
  width: 100px;
  height: 40px;
  background: rgba(255, 255, 255, 0.2);
  border: 2px solid var(--crt-text);
  border-radius: 4px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: grab;
  transition: transform 0.1s ease-out;
  transform-origin: center center;
}

.battery-item.dragging {
  cursor: grabbing;
}

.battery-item.correct {
  background: rgba(255, 255, 255, 0.4);
  box-shadow: 0 0 20px var(--crt-text);
  animation: batteryGlow 1s ease-in-out infinite alternate;
}

.battery-terminal {
  width: 20px;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
  font-size: 1.2rem;
  user-select: none;
}

.battery-body {
  flex-grow: 1;
  height: 100%;
  background: linear-gradient(
    90deg,
    rgba(255, 255, 255, 0.1),
    rgba(255, 255, 255, 0.2),
    rgba(255, 255, 255, 0.1)
  );
}

@keyframes batteryGlow {
  from {
    box-shadow: 0 0 10px var(--crt-text);
  }
  to {
    box-shadow: 0 0 20px var(--crt-text);
  }
} 